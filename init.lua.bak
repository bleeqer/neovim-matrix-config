-- ========= BOOTSTRAP lazy.nvim =========
local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
if not vim.loop.fs_stat(lazypath) then
  vim.fn.system({
    "git",
    "clone",
    "--filter=blob:none",
    "https://github.com/folke/lazy.nvim.git",
    lazypath,
  })
end
vim.opt.rtp:prepend(lazypath)

-- ========= PLUGINS =========
require("lazy").setup({
  { "folke/tokyonight.nvim" }, -- theme
  {
    "nvim-tree/nvim-tree.lua", -- file explorer
    dependencies = { "nvim-tree/nvim-web-devicons" },
  },
  { "nvim-telescope/telescope.nvim", dependencies = { "nvim-lua/plenary.nvim" } }, -- fuzzy finder
  { "nvim-treesitter/nvim-treesitter", build = ":TSUpdate" }, -- syntax highlighting

  -- Mason (LSP/DAP installer)
  { "williamboman/mason.nvim" },
  { "williamboman/mason-lspconfig.nvim", dependencies = { "williamboman/mason.nvim" } },

  -- Autocomplete
  { "hrsh7th/nvim-cmp",
    dependencies = {
      "hrsh7th/cmp-nvim-lsp",
      "hrsh7th/cmp-buffer",
      "hrsh7th/cmp-path",
      "saadparwaiz1/cmp_luasnip",
    }
  },
  { "L3MON4D3/LuaSnip" },

  -- UI / utilities
  { "nvim-lualine/lualine.nvim" },
  { "lewis6991/gitsigns.nvim" },
  { "folke/trouble.nvim", dependencies = { "nvim-tree/nvim-web-devicons" } },
  { "windwp/nvim-autopairs" },
  { "numToStr/Comment.nvim" },

  -- Debugging
  {
    "mfussenegger/nvim-dap",
    dependencies = {
      "rcarriga/nvim-dap-ui",
      "theHamsta/nvim-dap-virtual-text",
      "nvim-neotest/nvim-nio",
    }
  },
})

-- ========= BASIC SETTINGS =========
vim.opt.number = true
vim.opt.relativenumber = true
vim.opt.tabstop = 4
vim.opt.shiftwidth = 4
vim.opt.expandtab = true
vim.opt.termguicolors = true
vim.opt.cursorline = true
vim.opt.signcolumn = "yes" -- always show gutter for git/LSP signs
vim.opt.scrolloff = 5      -- keep context lines visible when scrolling
vim.g.mapleader = " "
vim.cmd.colorscheme("tokyonight")

-- ========= LUALINE =========
require("lualine").setup({ options = { theme = "tokyonight" } })

-- ========= NVIM-TREE =========
require("nvim-tree").setup({
  diagnostics = {
    enable = false,      -- ðŸš« no diagnostics in tree
    show_on_dirs = false,
    show_on_open_dirs = false,
  },
  renderer = {
    icons = {
      show = {
        git = true,
        file = true,
        folder = true,
        folder_arrow = true,
        diagnostics = false, -- ðŸš« hide diag icons explicitly
      },
    },
  },
})


require("lazy").setup({
  -- LSP support
  {
    "neovim/nvim-lspconfig",
    config = function()
      require("lspconfig").clangd.setup({})
    end,
  },

  -- (optional) treesitter for highlighting
  {
    "nvim-treesitter/nvim-treesitter",
    build = ":TSUpdate",
    config = function()
      require("nvim-treesitter.configs").setup({
        highlight = { enable = true },
      })
    end,
  },
})

-- Auto-open file explorer at startup
vim.api.nvim_create_autocmd("VimEnter", {
  callback = function()
    require("nvim-tree.api").tree.open()
  end,
})
vim.keymap.set("n", "<leader>e", ":NvimTreeToggle<CR>")

-- ========= TELESCOPE =========
local builtin = require("telescope.builtin")
vim.keymap.set("n", "<leader>f", builtin.find_files)
vim.keymap.set("n", "<leader>g", builtin.live_grep)

-- ========= TREESITTER =========
require("nvim-treesitter.configs").setup({
  ensure_installed = { "c", "cpp", "lua", "python", "javascript", "java", "asm" },
  highlight = { enable = true },
  indent = { enable = true },
})

-- ========= MASON + LSP =========
require("mason").setup()
require("mason-lspconfig").setup({
  ensure_installed = { "clangd", "pylsp", "ts_ls", "lua_ls" }, -- C, C++, Python, TS/JS, Lua, Java
  automatic_installation = true,
})

local capabilities = require("cmp_nvim_lsp").default_capabilities()

-- Helper to start LSP
local function start_lsp(name, cmd, settings)
  vim.lsp.start({
    name = name,
    cmd = cmd,
    root_dir = vim.fs.dirname(
      vim.fs.find({ "package.json", "tsconfig.json", "compile_commands.json", "pyproject.toml", "pom.xml", ".git" }, { upward = true })[1]
    ),
    settings = settings,
    capabilities = capabilities,
  })
end

-- Servers
start_lsp("clangd", { "clangd" })
start_lsp("pylsp", { "pylsp" })
start_lsp("ts_ls", { "typescript-language-server", "--stdio" })
start_lsp("lua_ls", { "lua-language-server" }, { Lua = { diagnostics = { globals = { "vim" } } } })
start_lsp("jdtls", { "jdtls" })

-- Keymaps for LSP (only when attached)
vim.api.nvim_create_autocmd("LspAttach", {
  callback = function(args)
    local opts = { buffer = args.buf }
    vim.keymap.set("n", "gd", vim.lsp.buf.definition, opts)
    vim.keymap.set("n", "K", vim.lsp.buf.hover, opts)
    vim.keymap.set("n", "<leader>rn", vim.lsp.buf.rename, opts)
    vim.keymap.set("n", "<leader>ca", vim.lsp.buf.code_action, opts)
    vim.keymap.set("n", "<leader>dl", vim.diagnostic.open_float, opts)
  end,
})

-- ========= AUTOCOMPLETE =========
local cmp = require("cmp")
cmp.setup({
  snippet = { expand = function(args) require("luasnip").lsp_expand(args.body) end },
  mapping = cmp.mapping.preset.insert({
    ["<C-Space>"] = cmp.mapping.complete(),
    ["<CR>"] = cmp.mapping.confirm({ select = true }),
  }),
  sources = cmp.config.sources({
    { name = "nvim_lsp" },
    { name = "buffer" },
    { name = "path" },
    { name = "luasnip" },
  }),
})

-- ========= GITSIGNS =========
require("gitsigns").setup()

-- ========= TROUBLE =========
require("trouble").setup()
vim.keymap.set("n", "<leader>xx", ":TroubleToggle<CR>")

-- ========= AUTOPAIRS =========
require("nvim-autopairs").setup()

-- ========= COMMENT =========
require("Comment").setup()

-- ========= DAP (Debugging) =========
local dap = require("dap")
local dapui = require("dapui")
dapui.setup()
require("nvim-dap-virtual-text").setup()

vim.keymap.set("n", "<F5>", function() dap.continue() end)
vim.keymap.set("n", "<F10>", function() dap.step_over() end)
vim.keymap.set("n", "<F11>", function() dap.step_into() end)
vim.keymap.set("n", "<F12>", function() dap.step_out() end)
vim.keymap.set("n", "<leader>b", function() dap.toggle_breakpoint() end)
vim.keymap.set("n", "<leader>dr", function() dap.repl.open() end)
vim.keymap.set("n", "<leader>du", function() dapui.toggle() end)
vim.keymap.set("n", "<leader>t", ":botright 15split | terminal<CR>", { desc = "Open terminal (bottom, 15 lines)" })
vim.keymap.set("n", "<leader>vt", ":botright 60vsplit | terminal<CR>", { desc = "Open terminal (right, 60 columns)" })

vim.api.nvim_set_keymap("t", "<Esc>", [[<C-\><C-n>]], { noremap = true })

dap.adapters.lldb = {
  type = "executable",
  command = "/usr/bin/lldb-vscode", -- adjust if needed
  name = "lldb"
}

dap.configurations.cpp = {
  {
    name = "Launch",
    type = "lldb",
    request = "launch",
    program = function()
      return vim.fn.input("Path to executable: ", vim.fn.getcwd() .. "/", "file")
    end,
    cwd = "${workspaceFolder}",
    stopOnEntry = false,
    args = {},
  },
}
dap.configurations.c = dap.configurations.cpp

